describe 'resource validation test' do
  before do
    @<%= resource_var_name %>= FHIR::<%= resource_type %>.new(load_json_fixture(:<%= sequence_name %>))
    @test = @sequence_class[:validate_resources]
    @sequence = @sequence_class.new(@instance, @client)
    @sequence.instance_variable_set(:'@resources_found', true)

    Inferno::ResourceReference.create(
      resource_type: '<%= resource_type %>',
      resource_id: @<%= resource_var_name %>.id,
      testing_instance: @instance<% if profile_uri.present? %>,
      profile: <%= profile_uri %><% end %>
    )
  end

  it 'fails if a resource does not contain a code for a CodeableConcept with a required binding' do
    [<%= concept_paths %>].each do |path|
      @sequence.resolve_path(@<%= resource_var_name %>, path).each do |concept|
        concept&.coding&.each do |coding|
          coding&.code = nil
          coding&.system = nil
        end
        concept&.text = 'abc'
      end
    end

    stub_request(:get, "#{@base_url}/<%= resource_type %>/#{@<%= resource_var_name %>.id}")
      .with(headers: @auth_header)
      .to_return(status: 200, body: @<%= resource_var_name %>.to_json)

    exception = assert_raises(Inferno::AssertionException) { @sequence.run_test(@test) }

    [<%= concept_paths %>].each do |path|
      assert_match(%r{<%= resource_type %>/#{@<%= resource_var_name %>.id}: The CodeableConcept at '#{path}' is bound to a required ValueSet but does not contain any codes\.}, exception.message)
    end
  end
end
